//! A (de)serialization framework for the Zig programming language.

////////////////////////////////////////////////////////////////////////////////
// Types
////////////////////////////////////////////////////////////////////////////////

/// A `Serializer` serializes values from Getty's data model into a data format.
pub const Serializer = @import("ser/interfaces/serializer.zig").Serializer;

/// A `Deserializer` deserializes values from a data format into Getty's data model.
pub const Deserializer = @import("de/interfaces/deserializer.zig").Deserializer;

////////////////////////////////////////////////////////////////////////////////
// Namespaces
////////////////////////////////////////////////////////////////////////////////

pub const ser = @import("ser/ser.zig").ser;
pub const de = @import("de/de.zig").de;

////////////////////////////////////////////////////////////////////////////////
// Functions
////////////////////////////////////////////////////////////////////////////////

/// Serializes `v` using a `getty.Serializer` `s`.
pub const serialize = @import("ser/serialize.zig").serialize;

/// Deserializes data from a `getty.Deserializer` `d` into a value of type
/// `T`.
pub const deserialize = @import("de/deserialize.zig").deserialize;

////////////////////////////////////////////////////////////////////////////////
// Values
////////////////////////////////////////////////////////////////////////////////

/// The default serialization tuple.
pub const st = @import("ser/tuples.zig").st;

/// The default deserialization tuple.
pub const dt = @import("de/tuples.zig").dt;

////////////////////////////////////////////////////////////////////////////////
// Testing
////////////////////////////////////////////////////////////////////////////////

comptime {
    @import("std").testing.refAllDecls(@This());
}
